name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # ============================================
  # JOB 1: Test Backend
  # ============================================
  test-backend:
    name: Test Backend (Python)
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: ankane/pgvector:v0.5.1
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: resumerag_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: 'api/requirements*.txt'
      
      - name: Install dependencies
        working-directory: ./api
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-extra.txt
      
      - name: Run database migrations
        working-directory: ./api
        env:
          DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/resumerag_test
        run: |
          alembic upgrade head
      
      - name: Run linting (Black + isort)
        working-directory: ./api
        run: |
          black --check app/ tests/
          isort --check-only app/ tests/
      
      - name: Run security scan (Bandit)
        working-directory: ./api
        run: |
          bandit -r app/ -ll -f json -o bandit-report.json || true
          cat bandit-report.json
      
      - name: Run tests with coverage
        working-directory: ./api
        env:
          DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/resumerag_test
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test-secret-key-for-ci-do-not-use-in-production
          FERNET_KEY: test-fernet-key-base64-encoded-32-bytes==
          ENVIRONMENT: testing
        run: |
          pytest -v --cov=app --cov-report=xml --cov-report=html --cov-report=term
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./api/coverage.xml
          flags: backend
          name: backend-coverage
      
      - name: Archive test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: backend-test-results
          path: |
            api/htmlcov/
            api/bandit-report.json

  # ============================================
  # JOB 2: Test Frontend
  # ============================================
  test-frontend:
    name: Test Frontend (React)
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'
      
      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci
      
      - name: Run linting (ESLint)
        working-directory: ./frontend
        run: npm run lint
      
      - name: Run tests
        working-directory: ./frontend
        run: npm test -- --coverage
      
      - name: Build production bundle
        working-directory: ./frontend
        env:
          VITE_API_BASE_URL: https://api.resumerag.example.com
        run: npm run build
      
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./frontend/coverage/coverage-final.json
          flags: frontend
          name: frontend-coverage
      
      - name: Archive build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: frontend/dist/

  # ============================================
  # JOB 3: Security Scan
  # ============================================
  security-scan:
    name: Security Scan (Trivy)
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner (filesystem)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # ============================================
  # JOB 4: Deploy Backend (Render)
  # ============================================
  deploy-backend:
    name: Deploy Backend to Render
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Trigger Render deployment
        env:
          RENDER_DEPLOY_HOOK_URL: ${{ secrets.RENDER_DEPLOY_HOOK_URL }}
        run: |
          curl -X POST "$RENDER_DEPLOY_HOOK_URL"
      
      - name: Wait for deployment (60s)
        run: sleep 60
      
      - name: Health check
        env:
          API_URL: ${{ secrets.BACKEND_URL }}
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" "$API_URL/health")
          if [ $response -ne 200 ]; then
            echo "Health check failed with status $response"
            exit 1
          fi
          echo "Backend deployed successfully! Health check passed."
      
      - name: Validate API endpoints
        env:
          API_URL: ${{ secrets.BACKEND_URL }}
        run: |
          # Test OpenAPI docs
          curl -f "$API_URL/docs" > /dev/null
          
          # Test manifest
          curl -f "$API_URL/.well-known/ai-plugin.json" > /dev/null
          
          echo "API validation complete!"

  # ============================================
  # JOB 5: Deploy Frontend (Vercel)
  # ============================================
  deploy-frontend:
    name: Deploy Frontend to Vercel
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Install Vercel CLI
        run: npm install -g vercel
      
      - name: Pull Vercel environment
        working-directory: ./frontend
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: vercel pull --yes --environment=production --token=$VERCEL_TOKEN
      
      - name: Build frontend
        working-directory: ./frontend
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: vercel build --prod --token=$VERCEL_TOKEN
      
      - name: Deploy to Vercel
        working-directory: ./frontend
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          vercel deploy --prebuilt --prod --token=$VERCEL_TOKEN > deployment-url.txt
          cat deployment-url.txt
      
      - name: Health check
        env:
          FRONTEND_URL: ${{ secrets.FRONTEND_URL }}
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" "$FRONTEND_URL")
          if [ $response -ne 200 ]; then
            echo "Frontend health check failed with status $response"
            exit 1
          fi
          echo "Frontend deployed successfully!"

  # ============================================
  # JOB 6: E2E Tests (Post-Deployment)
  # ============================================
  e2e-tests:
    name: E2E Tests (Playwright)
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci
      
      - name: Install Playwright browsers
        working-directory: ./frontend
        run: npx playwright install --with-deps
      
      - name: Run E2E tests
        working-directory: ./frontend
        env:
          E2E_BASE_URL: ${{ secrets.FRONTEND_URL }}
          E2E_API_URL: ${{ secrets.BACKEND_URL }}
        run: npm run test:e2e
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: e2e-test-results
          path: frontend/playwright-report/

  # ============================================
  # JOB 7: Notify on Completion
  # ============================================
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend, e2e-tests]
    if: always() && github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Send success notification
        if: needs.deploy-backend.result == 'success' && needs.deploy-frontend.result == 'success'
        run: |
          echo "✅ Deployment successful!"
          echo "Backend: ${{ secrets.BACKEND_URL }}"
          echo "Frontend: ${{ secrets.FRONTEND_URL }}"
      
      - name: Send failure notification
        if: needs.deploy-backend.result == 'failure' || needs.deploy-frontend.result == 'failure'
        run: |
          echo "❌ Deployment failed!"
          exit 1
